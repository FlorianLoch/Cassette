// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/spotify/abstractionLayer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	spotify "github.com/zmb3/spotify"
	oauth2 "golang.org/x/oauth2"
	http "net/http"
	reflect "reflect"
)

// MockSpotAuthenticator is a mock of SpotAuthenticator interface
type MockSpotAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockSpotAuthenticatorMockRecorder
}

// MockSpotAuthenticatorMockRecorder is the mock recorder for MockSpotAuthenticator
type MockSpotAuthenticatorMockRecorder struct {
	mock *MockSpotAuthenticator
}

// NewMockSpotAuthenticator creates a new mock instance
func NewMockSpotAuthenticator(ctrl *gomock.Controller) *MockSpotAuthenticator {
	mock := &MockSpotAuthenticator{ctrl: ctrl}
	mock.recorder = &MockSpotAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpotAuthenticator) EXPECT() *MockSpotAuthenticatorMockRecorder {
	return m.recorder
}

// AuthURL mocks base method
func (m *MockSpotAuthenticator) AuthURL(state string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthURL", state)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthURL indicates an expected call of AuthURL
func (mr *MockSpotAuthenticatorMockRecorder) AuthURL(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthURL", reflect.TypeOf((*MockSpotAuthenticator)(nil).AuthURL), state)
}

// NewClient mocks base method
func (m *MockSpotAuthenticator) NewClient(token *oauth2.Token) spotify.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", token)
	ret0, _ := ret[0].(spotify.Client)
	return ret0
}

// NewClient indicates an expected call of NewClient
func (mr *MockSpotAuthenticatorMockRecorder) NewClient(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockSpotAuthenticator)(nil).NewClient), token)
}

// SetAuthInfo mocks base method
func (m *MockSpotAuthenticator) SetAuthInfo(clientID, secretKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthInfo", clientID, secretKey)
}

// SetAuthInfo indicates an expected call of SetAuthInfo
func (mr *MockSpotAuthenticatorMockRecorder) SetAuthInfo(clientID, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthInfo", reflect.TypeOf((*MockSpotAuthenticator)(nil).SetAuthInfo), clientID, secretKey)
}

// Token mocks base method
func (m *MockSpotAuthenticator) Token(state string, r *http.Request) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", state, r)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token
func (mr *MockSpotAuthenticatorMockRecorder) Token(state, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockSpotAuthenticator)(nil).Token), state, r)
}

// MockSpotClient is a mock of SpotClient interface
type MockSpotClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpotClientMockRecorder
}

// MockSpotClientMockRecorder is the mock recorder for MockSpotClient
type MockSpotClientMockRecorder struct {
	mock *MockSpotClient
}

// NewMockSpotClient creates a new mock instance
func NewMockSpotClient(ctrl *gomock.Controller) *MockSpotClient {
	mock := &MockSpotClient{ctrl: ctrl}
	mock.recorder = &MockSpotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpotClient) EXPECT() *MockSpotClientMockRecorder {
	return m.recorder
}

// CurrentUser mocks base method
func (m *MockSpotClient) CurrentUser() (*spotify.PrivateUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser")
	ret0, _ := ret[0].(*spotify.PrivateUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser
func (mr *MockSpotClientMockRecorder) CurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockSpotClient)(nil).CurrentUser))
}

// Pause mocks base method
func (m *MockSpotClient) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
func (mr *MockSpotClientMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockSpotClient)(nil).Pause))
}

// PlayerState mocks base method
func (m *MockSpotClient) PlayerState() (*spotify.PlayerState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerState")
	ret0, _ := ret[0].(*spotify.PlayerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerState indicates an expected call of PlayerState
func (mr *MockSpotClientMockRecorder) PlayerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerState", reflect.TypeOf((*MockSpotClient)(nil).PlayerState))
}

// PlayerCurrentlyPlaying mocks base method
func (m *MockSpotClient) PlayerCurrentlyPlaying() (*spotify.CurrentlyPlaying, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerCurrentlyPlaying")
	ret0, _ := ret[0].(*spotify.CurrentlyPlaying)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerCurrentlyPlaying indicates an expected call of PlayerCurrentlyPlaying
func (mr *MockSpotClientMockRecorder) PlayerCurrentlyPlaying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerCurrentlyPlaying", reflect.TypeOf((*MockSpotClient)(nil).PlayerCurrentlyPlaying))
}

// PlayerDevices mocks base method
func (m *MockSpotClient) PlayerDevices() ([]spotify.PlayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerDevices")
	ret0, _ := ret[0].([]spotify.PlayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerDevices indicates an expected call of PlayerDevices
func (mr *MockSpotClientMockRecorder) PlayerDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerDevices", reflect.TypeOf((*MockSpotClient)(nil).PlayerDevices))
}

// PlayOpt mocks base method
func (m *MockSpotClient) PlayOpt(opt *spotify.PlayOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayOpt", opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlayOpt indicates an expected call of PlayOpt
func (mr *MockSpotClientMockRecorder) PlayOpt(opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayOpt", reflect.TypeOf((*MockSpotClient)(nil).PlayOpt), opt)
}

// Shuffle mocks base method
func (m *MockSpotClient) Shuffle(shuffle bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shuffle", shuffle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shuffle indicates an expected call of Shuffle
func (mr *MockSpotClientMockRecorder) Shuffle(shuffle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockSpotClient)(nil).Shuffle), shuffle)
}
